/*!
 * DJ Mountainous - Dj Mountainous v1.1.1 (djmountainous.com)
 * Copyright 2016-2016 Corey Sanford
 */
"use strict";function collapseNavbar(){$(".navbar").offset().top>$("#waves").offset().top-150?$(".navbar-fixed-top").addClass("top-nav-collapse"):$(".navbar-fixed-top").removeClass("top-nav-collapse")}$(function(){var t=[1,2,3,4,5,6,25,50,75,95],i=function(t){this.$audioPlayer=t,this.stub=this.$audioPlayer.attr("id"),this.rating=this.$audioPlayer.data("rating"),this.$playPauseBtn=this.$audioPlayer.find(".play-pause").eq(0),this.$track=this.$audioPlayer.find("audio").eq(0),this.track=this.$track.get(0),this.isPastMilestone={},this.constructMilestones(),this.$progressBar=this.$audioPlayer.find(".progress-bar").eq(0),this.$buffer=this.$progressBar.find(".buffer").eq(0),this.$played=this.$progressBar.find(".played").eq(0),this.$currentTime=this.$audioPlayer.find(".current-time").eq(0),this.$mixLength=this.$audioPlayer.find(".mix-length").eq(0),this.$divider=this.$audioPlayer.find(".divider").eq(0),this.trackRefreshTimer=null};i.prototype.constructMilestones=function(){var i=this;t.forEach(function(t){i.isPastMilestone[t]=!1})},i.prototype.sendProgressEvents=function(){var i=this,a=this.track.currentTime/this.track.duration*100;t.forEach(function(t){a>t&&(i.isPastMilestone[t]||(i.isPastMilestone[t]=!0,ga("send","event","Mix","progress",i.stub,t)))})},i.prototype.pauseAllOthers=function(){$(".audio-player").not(this.$audioPlayer).each(function(){var t=new i($(this));t.pauseTrack()})},i.prototype.isPaused=function(){return this.track.paused},i.prototype.pauseTrack=function(t){this.track.pause(),this.$audioPlayer.removeClass("playing"),this.$progressBar.removeClass("expanded")},i.prototype.playTrack=function(t){ga("send","event","Mix","play",this.stub,this.rating),this.pauseAllOthers(),this.track.play(),this.$audioPlayer.addClass("playing"),this.$progressBar.addClass("expanded"),this.startInterval(),this.$currentTime.text(this.currentTimeString()),this.$divider.show(),this.$mixLength.text(this.durationString())},i.prototype.startInterval=function(){this.trackRefreshTimer=setInterval(this.tick.bind(this),100)},i.prototype.clearInterval=function(){clearInterval(this.trackRefreshTimer)},i.prototype.tick=function(){this.$currentTime.text(this.currentTimeString()),this.updateProgressBar(),this.sendProgressEvents()},i.prototype.updateProgressBar=function(){var t=this.track.currentTime/this.track.duration*100;this.$played.css("width",t+"%")},i.prototype.currentTimeString=function(){return this.timeString(this.track.currentTime)},i.prototype.durationString=function(){return this.timeString(this.track.duration)},i.prototype.timeString=function(t){if(isNaN(t)){if(isNaN(this.track.duration))return"";this.track.duration}var i="0"+Math.round(t%60);return i=i.substr(i.length-2),Math.round(t/60)+":"+i},i.prototype.togglePlayPause=function(){this.isPaused()?this.playTrack():this.pauseTrack()},i.prototype.seek=function(t){var i=t.offsetX/$(t.target).width();this.track.currentTime=i*this.track.duration,this.updateProgressBar()},$("body").on("click",".play-pause",function(){var t=new i($(this).closest(".audio-player").eq(0));t.togglePlayPause()}),$("body").on("click",".progress-bar",function(t){var a=new i($(this).closest(".audio-player").eq(0));a.seek(t)}),$("body").on("click",".download",function(t){ga("send","event","Mix","download",$(this).closest(".audio-player").attr("id"),$(this).closest(".audio-player").data("rating"))})}),$(window).scroll(collapseNavbar),$(document).ready(collapseNavbar),$(function(){$("a.page-scroll").bind("click",function(t){$(this);t.preventDefault()})}),$(".navbar-collapse ul li a").click(function(){"dropdown-toggle active"!=$(this).attr("class")&&"dropdown-toggle"!=$(this).attr("class")&&$(".navbar-toggle:visible").click()}),$(function(){function t(t){$(".v-descriptions > p").not('.v-descriptions > p[data-rating="'+t+'"]').hide(),$(".bottom-bar > div .rating-block").not('.bottom-bar > div .rating-block[data-rating="'+t+'"]').css("opacity",a).removeClass("active"),$('.bottom-bar > div .rating-block[data-rating="'+t+'"]').css("opacity",1).addClass("active"),$('.v-descriptions > p[data-rating="'+t+'"]').show()}var i=480,a="0.4",e="0.5",r=$(".bottom-bar .rating-block"),s=r.length;r.eq(0).height();0!==s&&(setInterval(function(){var t=Math.floor(Math.random()*s)+1;r.not(".active").css("opacity",a);for(var i=0;i<t;i++){var n=Math.floor(Math.random()*s)+1;r.eq(n).hasClass("active")||r.eq(n).css("opacity",e)}},i),$(".bottom-bar > div").on("click",function(){var i=$(this).find(".rating-block").data("rating");t(i)}))}),$(function(){window.location.search.replace("?","");$("*").on("click",function(){$(".mix").css("opacity",1)}),$("#mixes").on("click",".mix__details .rating",function(){$('.rating-block[data-rating="'+$(this).data("rating")+'"]').closest("div").trigger("hover"),$('.rating-block[data-rating="'+$(this).data("rating")+'"]').closest("div").trigger("click"),$("html, body").scrollTop($(".bottom-bar").offset().top-130)})}),$(function(){function t(t,i){var a=MyApp.templates.mixes(t);$("#mixes-tmpl-"+i).html(a)}var i={mixes:[{title:"The Eiger",genres:"Tech House",date:"Sept 2016",slug:"va-tech-house",rating:3},{title:"Garibaldi",genres:"Deep House",date:"June 2016",slug:"va-deep-house-v2",rating:2}]},a={mixes:[{title:"Blueprint 19th Warmup",genres:"Rezz Griz Grime W.S.N DFrancis",date:"October 2016",slug:"blueprint-19-warmup",rating:9},{title:"Live @ BirthRave 2016",genres:"Bass Funk, Trap, Dub",date:"Sept 24, 2016",slug:"live-birthrave-2016-bass-funk-dub",rating:8},{title:"Black Tusk",genres:"Trap & Dubstep",date:"August 2016",slug:"va-dubtrap",rating:9},{title:"Seven Lions warmup",genres:"Dreamstep",date:"October 2016",slug:"seven-lions-warm-up-mix",rating:7}]};t(a,"intense"),t(i,"calm")});
//# sourceMappingURL=data:application/json;base64,
